@Library("sonarqubeLibrary@master")
import org.technion.sonarqube.*

node('SoanrQubeNode') {
    
    // clean workspace:
    stage('cleanup') {
        cleanWs()
    }
    
    // clone project to workspace folder (notice the "." after the url):
    stage('clone repository') {
        run("git clone " + "${GIT_URL}" + " .")
    }
    
    // import profile:
    stage('import profile') {
        try {
            def importProfile = new ImportProfile()
            if (env.TOKEN && !env.USERNAME && !env.PASSWORD) {
                importProfile.importProfile("${SONARQUBE_SERVER}", "${WORKSPACE}\\${PROFILES_DIRECTORY}", "${INPUT_FILENAME}", "${TOKEN}")
            } else if (!env.TOKEN && env.USERNAME && env.PASSWORD) {
                importProfile.importProfile("${SONARQUBE_SERVER}", "${WORKSPACE}\\${PROFILES_DIRECTORY}", "${INPUT_FILENAME}", "${USERNAME}", "${PASSWORD}")
            } else {
                println "pipeline: parameters [TOKEN] or [USERNAME and PASSWORD] are missing"
                currentBuild.result = 'FAILURE'
            }            
        } catch(IOException e) {
            println(e.getMessage())
            currentBuild.result = 'FAILURE'
        }
    }
    
    // in case of failure in previous stage - return:
    if (currentBuild.result == 'FAILURE') {
        return
    }
    
}

def run(command) {
    if(isUnix()) {
        shell(command)
    } else {
        bat(command)
    }
}
